\ run tests with: gforth Tests.fs

S" BankOcr.fs" REQUIRED

: TEST-SAMPLE-012345678
\  0         1         2         3         4         5         6         7         8
\  01234567890123456789012345678901234567890123456789012345678901234567890123456789012
S"  _     _  _     _  _  _  _ | |  | _| _||_||_ |_   ||_||_|  ||_  _|  | _||_|  ||_|"
OCR-BITS SWAP CMOVE ;

: CHECK-SAMPLE-012345678 ( -- t|f )
    TRUE
    9 0 DO ACCOUNT I + C@ I <> IF DROP FALSE THEN LOOP ;

: CHECKS
    TEST-SAMPLE-012345678
    ASSERT( 32  BAR? 0 = ) 
    ASSERT( 95  BAR? 1 = ) 
    ASSERT( 124 BAR? 1 = )
    [ 2 BASE ! ]
    ASSERT( 100101 1 2*OR 1001011 = )
    ASSERT( 111001 0 2*OR 1110010 = )
    [ DECIMAL ]
    ASSERT( 0 0 OCR-BIT-OFFSET 0  = )
    ASSERT( 0 2 OCR-BIT-OFFSET 2  = )
    ASSERT( 0 3 OCR-BIT-OFFSET 27 = )
    ASSERT( 0 8 OCR-BIT-OFFSET 56 = )
    ASSERT( 8 6 OCR-BIT-OFFSET 78 = )
    ASSERT( 8 7 OCR-BIT-OFFSET 79 = )
    ASSERT( 8 8 OCR-BIT-OFFSET 80 = )
    ASSERT( 0 PATTERN [ 2 BASE ! ] 010101111 = [ DECIMAL ] )
    ASSERT( 1 PATTERN [ 2 BASE ! ] 000001001 = [ DECIMAL ] )
    ASSERT( 8 PATTERN [ 2 BASE ! ] 010111111 = [ DECIMAL ] )
    ASSERT( [ 2 BASE ! ] 011111111 [ DECIMAL ] DIGIT NOT-FOUND =  )
    ASSERT( [ 2 BASE ! ] 000111001 [ DECIMAL ] DIGIT 4 =  )
    ASSERT( 0 ACCOUNT-DIGIT ACCOUNT 0 + C@ 0 = ) 
    ASSERT( 1 ACCOUNT-DIGIT ACCOUNT 1 + C@ 1 = ) 
    ASSERT( 2 ACCOUNT-DIGIT ACCOUNT 2 + C@ 2 = ) 
    ASSERT( 3 ACCOUNT-DIGIT ACCOUNT 3 + C@ 3 = ) 
    ASSERT( 4 ACCOUNT-DIGIT ACCOUNT 4 + C@ 4 = ) 
    ASSERT( 5 ACCOUNT-DIGIT ACCOUNT 5 + C@ 5 = ) 
    ASSERT( 6 ACCOUNT-DIGIT ACCOUNT 6 + C@ 6 = ) 
    ASSERT( 7 ACCOUNT-DIGIT ACCOUNT 7 + C@ 7 = ) 
    ASSERT( 8 ACCOUNT-DIGIT ACCOUNT 8 + C@ 8 = ) 
    \ altering an ocr digit
    OCR-BITS 1+ 32 SWAP C!
    ASSERT( 0 ACCOUNT-DIGIT ACCOUNT 0 + C@ 255 = ) 
    \ fixing the ocr digit back
    OCR-BITS 1+ 95 SWAP C!
    ASSERT( ACCOUNT ACCOUNT-SIZE ERASE 
            OCR>ACCOUNT
            CHECK-SAMPLE-012345678 )
    PRINT-ACCOUNT


            
; 
CR CHECKS .S CR BYE
